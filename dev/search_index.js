var documenterSearchIndex = {"docs":
[{"location":"api/private/#Internal-API","page":"Internal API","title":"Internal API","text":"","category":"section"},{"location":"api/private/#Algebra","page":"Internal API","title":"Algebra","text":"","category":"section"},{"location":"api/private/#SpaceGroups.GroupElement","page":"Internal API","title":"SpaceGroups.GroupElement","text":"GroupElement\n\nAn abstract type representing an element of a group.\n\n\n\n\n\n","category":"type"},{"location":"api/private/#SpaceGroups.FiniteGroup","page":"Internal API","title":"SpaceGroups.FiniteGroup","text":"FiniteGroup{E <: GroupElement}\n\nRepresents a finite group with elements of type E.\n\nType Parameters\n\nE <: GroupElement: The type of the elements in the group, which must be a subtype of GroupElement and provide a composition operation ∘.\n\nFields\n\ne::Set{E}: The set of all group elements.\n\nExample\n\nstruct MyElement <: GroupElement\n    # Define the structure of your group element here\nend\n\nfunction ∘(x::MyElement, y::MyElement)\n    # Define the group operation here\nend\n\n# Define the generators of the group\ngen = (MyElement(),)  # An iterable of group elements\ngroup = FiniteGroup{MyElement}(gen)\n\n\n\n\n\n","category":"type"},{"location":"#SpaceGroups.jl","page":"Home","title":"SpaceGroups.jl","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"A lightweight Julia package providing efficient data structures for handling crystallographic symmetry operations in any dimension.","category":"page"},{"location":"api/public/#Public-API","page":"API Reference","title":"Public API","text":"","category":"section"},{"location":"api/public/#Algebra","page":"API Reference","title":"Algebra","text":"","category":"section"},{"location":"api/public/#SpaceGroups.SpaceGroupElement","page":"API Reference","title":"SpaceGroups.SpaceGroupElement","text":"SpaceGroupElement{N,T<:Integer}\n\nAn element of a space group in N dimensions.\n\nType Parameters\n\nN: The dimension of the space.\nT<:Integer: The type of the elements in the transformation matrix and translation vector.\n\nFields\n\na::StaticArrays.SMatrix{N,N,T}: The linear transformation matrix.\nb::StaticArrays.SVector{N, Rational{T}}: The translation vector.\n\nThe group action is given by the formula x ↦ a*x+b.\n\nConstructors\n\nSpaceGroupElement{N,T}(): The identity element of the space group.\nSpaceGroupElement{N,T}(t::SVector{N,T}): A pure lattice translation.\nSpaceGroupElement{N,T}(m::SMatrix{N,N,T}): A pure linear transformation.\n\nExample\n\njulia> SpaceGroupElement{2, Int}()\nSpaceGroupElement(\n  a = [1 0; 0 1],\n  b = [0//1, 0//1]\n)\n\njulia> SpaceGroupElement(SMatrix{2,2,Int}([0 1; -1 0]))\nSpaceGroupElement(\n  a = [0 1; -1 0],\n  b = [0//1, 0//1]\n)\n\njulia> SpaceGroupElement(SVector{2,Int}([1, 1]))\nSpaceGroupElement(\n  a = [1 0; 0 1],\n  b = [1//1, 1//1]\n)\n\n\n\n\n\n","category":"type"},{"location":"api/public/#SpaceGroups.SpaceGroupQuotient","page":"API Reference","title":"SpaceGroups.SpaceGroupQuotient","text":"SpaceGroupQuotient{N,T} = FiniteGroup{SpaceGroupElement{N,T}}\n\nThe factor group of the space group with respect to the subgroup of pure translations. This group is isomorphic to the point group of the space group, but the representation  of its elements contains enough information to reconstruct the original space group. In  particular, the representation of symmorphic and non-symmorphic space groups is different.\n\nType Parameters\n\nN: The dimension of the space.\nT<:Integer: The type of the elements in the transformation matrix and translation vector.\n\nConstructors\n\nSpaceGroupQuotient{N,T}(): Construct the trivial space group (P1) of dimension N \nSpaceGroupQuotient{N,T}(gen): Constructs the space group using the generating set gen  (which should be an iterable of SpaceGroupElement{N, T})\n\nExamples\n\njulia> SpaceGroupQuotient{2, Int}()\nSpaceGroupQuotient (dimension 2, order 1)\n\njulia> g1=@SGE([-1 0; 0 -1])\nSpaceGroupElement(\n  a = [-1 0; 0 -1],\n  b = [0//1, 0//1]\n)\n\njulia> g2=@SGE([-1 0; 0 1], [1//2, 0//1])\nSpaceGroupElement(\n  a = [-1 0; 0 1],\n  b = [1//2, 0//1]\n)\n\njulia> p2mg=SpaceGroupQuotient([g1, g2])\nSpaceGroupQuotient (dimension 2, order 4)\n\n\n\n\n\n","category":"type"},{"location":"api/public/#SpaceGroups.@SGE","page":"API Reference","title":"SpaceGroups.@SGE","text":"@SGE(args...)\n\nA macro for creating SpaceGroupElement objects. It can take either one or two arguments:\n\nIf two arguments are provided, the first should be a matrix and the second a vector.   The macro will create a SpaceGroupElement with the given matrix and vector.\nIf one argument is provided, it can be either a matrix or a vector.   If it's a matrix, the macro will create a SpaceGroupElement with the identity matrix   and a zero vector. If it's a vector, the macro will create a SpaceGroupElement with   the identity matrix and the given vector.\n\nThe macro will check the dimensions and types of the inputs to ensure they are valid.\n\nArguments\n\nargs...: The arguments to be passed to the macro. It can be either one or two arguments.\n\nReturns\n\nA SpaceGroupElement object created from the provided arguments.\n\nExample\n\njulia> @SGE([1 0; 0 -1], [1//3, 2//3])\nSpaceGroupElement(\n    a = [1 0; 0 -1],\n    b = [1//3, 2//3]\n)\n\njulia> @SGE([1 0; 0 -1])\nSpaceGroupElement(\n    a = [1 0; 0 -1],\n    b = [0//1, 0//1]\n)\n\njulia> @SGE([1//3, 2//3])\nSpaceGroupElement(\n    a = [1 0; 0 1],\n    b = [1//3, 2//3]\n)\n\n\n\n\n\n","category":"macro"},{"location":"api/public/#Base.:*-Union{Tuple{T}, Tuple{N}, Tuple{SpaceGroupElement{N, T}, SpaceGroupElement{N, T}}} where {N, T<:Integer}","page":"API Reference","title":"Base.:*","text":"*(e1::SpaceGroupElement{N,T}, e2::SpaceGroupElement{N,T}) where {N,T<:Integer}\n\nComposition of two space group elements.\n\nArguments\n\ne1::SpaceGroupElement{N,T}: The first space group element.\ne2::SpaceGroupElement{N,T}: The second space group element.\n\nReturns\n\nThe composition of the two space group elements.\n\nExample\n\njulia> e1 = @SGE([0 1; -1 0]);\n       e2 = @SGE([1//1, 1//1]);\n       e1*e2\nSpaceGroupElement(\n  a = [0 1; -1 0],\n  b = [1//1, -1//1]\n)\n\n\n\n\n\n","category":"method"},{"location":"api/public/#Base.:∘-Union{Tuple{T}, Tuple{N}, Tuple{SpaceGroupElement{N, T}, SpaceGroupElement{N, T}}} where {N, T<:Integer}","page":"API Reference","title":"Base.:∘","text":"∘(e1::SpaceGroupElement{N,T}, e2::SpaceGroupElement{N,T}) where {N,T<:Integer}\n\nReduced composition of two space group elements. The translation vector of the result is brought  inside the standard unit cell.\n\nArguments\n\ne1::SpaceGroupElement{N,T}: The first space group element.\ne2::SpaceGroupElement{N,T}: The second space group element.\n\nReturns\n\nThe reduced composition of the two space group elements.\n\nExample\n\njulia> e1 = @SGE([0 1; -1 0]);\n       e2 = @SGE([1//1, 1//1]);\n       e1∘e2\nSpaceGroupElement(\n  a = [0 1; -1 0],\n  b = [0//1, 0//1]\n)\n\n\n\n\n\n","category":"method"},{"location":"api/public/#SpaceGroups.reduce","page":"API Reference","title":"SpaceGroups.reduce","text":"reduce(g::SpaceGroupElement{N,T}) where {N, T<:Integer}\n\nBrings the translation vector of a space group element inside the standard unit cell.\n\nArguments\n\ng::SpaceGroupElement{N,T}: The space group element to be reduced.\n\nReturns\n\nA new SpaceGroupElement with the same linear transformation matrix and a reduced translation vector.\n\n\n\n\n\n","category":"function"},{"location":"api/public/#Reciprocal-space","page":"API Reference","title":"Reciprocal space","text":"","category":"section"},{"location":"api/public/#SpaceGroups.AffinePhase","page":"API Reference","title":"SpaceGroups.AffinePhase","text":"AffinePhase{N, T<:Integer}\n\nRepresents the phase of a plane wave x ↦ exp(2π i (k ⋅ x + ϕ)).\n\nThe wave is characterized by a wave vector k and a phase offset ϕ.\n\nType Parameters\n\nN: The dimensionality of the space.\nT<:Integer: The numeric type for the elements of the wave vector.\n\nFields\n\nk::SVector{N, T}: The wave vector.\nϕ::Rational{T}: The phase offset, always maintained within the interval [0, 1).\n\nConstructors\n\nAffinePhase(k::SVector{N,T}, ϕ::Rational{T}): Creates a new AffinePhase instance. \n\nThe phase ϕ is automatically normalized to its fractional part.\n\n\n\n\n\n","category":"type"},{"location":"api/public/#Base.:*-Union{Tuple{T}, Tuple{N}, Tuple{SpaceGroupElement{N, T}, AffinePhase{N, T}}} where {N, T<:Integer}","page":"API Reference","title":"Base.:*","text":"*(g::SpaceGroupElement, ap::AffinePhase) -> AffinePhase\n\nApplies a symmetry operation g to an AffinePhase ap.\n\nThe action of a space group element g = (a, b) on an AffinePhase with wave vector k and phase ϕ. This results in a new AffinePhase with a transformed wave vector k' = aᵀk and a new phase ϕ' = ϕ + b ⋅ k.\n\nArguments\n\ng::SpaceGroupElement{N,T}: The symmetry operation to apply.\nap::AffinePhase{N,T}: The affine phase to be transformed.\n\nReturns\n\nAffinePhase{N,T}: A new AffinePhase instance after the transformation.\n\n\n\n\n\n","category":"method"},{"location":"api/public/#SpaceGroups.ComplexOrbit","page":"API Reference","title":"SpaceGroups.ComplexOrbit","text":"ComplexOrbit{N, T<:Integer}\n\nRepresents an orbit of plane waves where the phase is unconstrained.\n\nIn a ComplexOrbit, for any wave vector k in the orbit, its antipode -k is not present.\n\nType Parameters\n\nN: The dimensionality of the space.\nT<:Integer: The numeric type for the elements of the affine phase.\n\nFields\n\naps::Vector{AffinePhase{N,T}}: A vector of AffinePhase objects that constitute the orbit.\n\n\n\n\n\n","category":"type"},{"location":"api/public/#SpaceGroups.RealOrbit","page":"API Reference","title":"SpaceGroups.RealOrbit","text":"RealOrbit{N, T<:Integer}\n\nRepresents an orbit of plane waves where the phase is fixed modulo π.\n\nIn a RealOrbit, for every wave vector k in the orbit, its antipode -k is also present.  The phase is specifically determined to ensure that the superposition of two antipodal waves  results in a real-valued function.\n\nType Parameters\n\nN: The dimensionality of the space.\nT<:Integer: The numeric type for the elements of the affine phase.\n\nFields\n\naps::Vector{AffinePhase{N,T}}: A vector of AffinePhase objects forming the orbit.\n\n\n\n\n\n","category":"type"},{"location":"api/public/#SpaceGroups.ExtinctOrbit","page":"API Reference","title":"SpaceGroups.ExtinctOrbit","text":"ExtinctOrbit{N, T<:Integer}\n\nRepresents an orbit of wave vectors that corresponds to a systematic extinction.\n\nSystematic extinctions arise in the case of non-symmorphic space groups when a symmetry  operation preserves the direction of a wave vector but alters the phase of the corresponding  plane wave, leading to destructive interference.\n\nType Parameters\n\nN: The dimensionality of the space.\nT<:Integer: The numeric type for the elements of the affine phase.\n\nFields\n\nk::Vector{SVector{N,T}}: A vector of wave vectors k that are subject to extinction.\n\n\n\n\n\n","category":"type"},{"location":"api/public/#SpaceGroups.FormalOrbit","page":"API Reference","title":"SpaceGroups.FormalOrbit","text":"FormalOrbit{N, T<:Integer}\n\nA type alias representing the union of ComplexOrbit, RealOrbit, and ExtinctOrbit.\n\nThis union type encompasses all possible outcomes of generating an orbit from a wave vector and a  space group, including orbits that may be physically unobservable due to extinction.\n\n\n\n\n\n","category":"type"},{"location":"api/public/#SpaceGroups.PhysicalOrbit","page":"API Reference","title":"SpaceGroups.PhysicalOrbit","text":"PhysicalOrbit{N, T<:Integer}\n\nA type alias for the union of ComplexOrbit and RealOrbit.\n\nThis type represents orbits corresponding to actual Bragg peaks.\n\n\n\n\n\n","category":"type"},{"location":"api/public/#SpaceGroups.make_orbit","page":"API Reference","title":"SpaceGroups.make_orbit","text":"make_orbit(k::SVector{N,T}, G::SpaceGroupQuotient{N,T}) -> FormalOrbit{N,T}\n\nGenerates an orbit of affine phases from an initial wave vector k for a given  space group (quotient) G.\n\nThe function determines the type of orbit (Complex, Real, or Extinct) by  analyzing the action of the symmetry operations in G on the initial wave vector.\n\nArguments\n\nk::SVector{N,T}: The starting wave vector.\nG::SpaceGroupQuotient{N,T}: The quotient of the space group.\n\nReturns\n\nFormalOrbit{N,T}: The generated orbit, which can be a ComplexOrbit, RealOrbit, or ExtinctOrbit.\n\nLogic\n\nExtinction Check: If any symmetry operation maps k to itself but shifts its phase, the orbit is ExtinctOrbit.\nReal Orbit Check: If the orbit contains the antipode -k for any k in the orbit, it is a RealOrbit. In this case,   for the corresponding affine phases, ϕ is shifted to have opposite sign for the antipodes to insure that their   superposition is a real function.  \nComplex Orbit: If neither of the above conditions is met, the orbit is ComplexOrbit.\n\nExample\n\njulia> g=@SGE([-1 0; 0 1], [0//1, 1//2]);\n\njulia> p1g1=SpaceGroupQuotient([g])\nSpaceGroupQuotient (dimension 2, order 2)\n\njulia> make_orbit([1, -1], p1g1)\nComplexOrbit with 2 elements\n\njulia> make_orbit([1, 0], p1g1)\nRealOrbit with 2 elements\n\njulia> make_orbit([0, 1], p1g1)\nExtinctOrbit with 2 elements\n\n\n\n\n\n","category":"function"},{"location":"api/public/#Wyckoff-positions","page":"API Reference","title":"Wyckoff positions","text":"","category":"section"},{"location":"api/public/#SpaceGroups.WyckoffPosition","page":"API Reference","title":"SpaceGroups.WyckoffPosition","text":"WyckoffPosition{N,T<:Integer}\n\nA Wyckoff position in N dimensions.\n\nType Parameters\n\nN: The dimension of the space.\nT<:Integer: The type of the elements in the transformation matrix and translation vector.\n\nFields\n\nanchor::StaticArrays.SVector{N, Rational{T}}: The anchor point of the Wyckoff position.\ndirections::StaticArrays.SMatrix{N,M,T}: The directions of the Wyckoff position.\n\nConstructors\n\nWyckoffPosition(anchor::SVector{N,Rational{T}}, directions::SMatrix{N,M,T}): A Wyckoff  position with free parameters. The constructore checks that the directions are  linearly independent. \nWyckoffPosition{N,T}(): A general Wyckoff position, the number of free parameters  equals the dimension of the space. \nWyckoffPosition(anchor::SVector{N,Rational{T}}): A Wyckoff position with zero  free parameters (the most special type of Wyckoff position).\n\n\n\n\n\n","category":"type"},{"location":"api/public/#SpaceGroups.@WP","page":"API Reference","title":"SpaceGroups.@WP","text":"@WP(anchor_expr, dirs_expr=nothing)\n\nConstruct a Wyckoff position using a convenient macro interface.\n\nanchor_expr: An expression that evaluates to a vector of rationals, specifying the anchor point.\ndirs_expr: (Optional) An expression that evaluates to a matrix of integers, specifying the directions.  If omitted or nothing, the Wyckoff position will have zero free parameters.\n\nExamples\n\njulia> @WP([0//1, 1//2, 1//2], [1; 1; 1;;])\nWyckoffPosition(anchor=[0//1, 1//2, 1//2]), directions=[1; 1; 1;;])\n\njulia> @WP([0//1, 1//2, 1//2])\nWyckoffPosition(anchor=[0//1, 1//2, 1//2]), no parameters)\n\n\n\n\n\n","category":"macro"},{"location":"api/public/#Base.:*-Union{Tuple{T}, Tuple{N}, Tuple{SpaceGroupElement{N, T}, WyckoffPosition{N, T}}} where {N, T<:Integer}","page":"API Reference","title":"Base.:*","text":"*(e::SpaceGroupElement{N,T}, w::WyckoffPosition{N, T}) -> WyckoffPosition{N, T}\n\nAction of a space group element on a Wyckoff position.\n\nExample\n\njulia> g=@SGE([0 1; -1 0])\nSpaceGroupElement(\n  a = [0 1; -1 0],\n  b = [0//1, 0//1]\n)\n\njulia> w=@WP([1//2, 0//1])\nWyckoffPosition(anchor=[1//2, 0//1]), no parameters)\n\njulia> g*w\nWyckoffPosition(anchor=[0//1, -1//2]), no parameters)\n\n\n\n\n\n","category":"method"},{"location":"api/public/#SpaceGroups.stabilizer_quotient","page":"API Reference","title":"SpaceGroups.stabilizer_quotient","text":"stabilizer_quotient(w::WyckoffPosition{N, T}, G::SpaceGroupQuotient{N, T}) where {N, T<:Integer}\n\nCompute the quotient of the stabilizer group (the site symmetry group) of a Wyckoff position  (with respect to translations).\n\nArguments\n\nw::WyckoffPosition{N, T}: The Wyckoff position.\nG::SpaceGroupQuotient{N, T}: The space group quotient.\n\nReturns\n\nThe stabilizer subgroup of G for the Wyckoff position w.\n\nExample\n\njulia> g1=@SGE([-1 0; 0 -1]);\n\njulia> g2=@SGE([-1 0; 0 1], [1//2, 0//1]);\n\njulia> p2mg=SpaceGroupQuotient([g1, g2]);\n\njulia> w1=@WP([1//4, 0], [0; 1;;]);\n\njulia> G=stabilizer_quotient(w1, p2mg)\nSpaceGroupQuotient (dimension 2, order 2)\n\njulia> G.e\nSet{SpaceGroupElement{2, Int64}} with 2 elements:\n  SGE([1 0; 0 1], [0//1, 0//1])\n  SGE([-1 0; 0 1], [1//2, 0//1])\n\n\n\n\n\n","category":"function"},{"location":"api/public/#SpaceGroups.is_valid_wyckoff","page":"API Reference","title":"SpaceGroups.is_valid_wyckoff","text":"is_valid(w::WyckoffPosition{N, T}, G::SpaceGroupQuotient{N, T})::Bool where {N, T<:Integer}\n\nCheck if w is a valid special Wyckoff position for the space group quotient G. Namely, check  if the stabilizer group of w does not conserve more directions than the number of free parameters of w.\n\nArguments\n\nw::WyckoffPosition{N, T}: The Wyckoff position.\nG::SpaceGroupQuotient{N, T}: The space group quotient.\n\nReturns\n\ntrue if w is a valid special Wyckoff position for the space group quotient G, false otherwise.\n\nExample\n\njulia> g1=@SGE([-1 0; 0 -1]);\n\njulia> g2=@SGE([-1 0; 0 1], [1//2, 0//1]);\n\njulia> p2mg=SpaceGroupQuotient([g1, g2]);)\n\njulia> w1=@WP([1//4, 0], [0; 1;;])\nWyckoffPosition(anchor=[1//4, 0//1]), directions=[0; 1;;])\n\njulia> is_valid_wyckoff(w1, p2mg)\ntrue\n\njulia> w2=@WP([1//3, 0], [0; 1;;])\nWyckoffPosition(anchor=[1//3, 0//1]), directions=[0; 1;;])\n\njulia> is_valid_wyckoff(w2, p2mg)\nfalse\n\n\n\n\n\n","category":"function"},{"location":"api/public/#SpaceGroups.normalize","page":"API Reference","title":"SpaceGroups.normalize","text":"normalize(w::WyckoffPosition{N, T}) -> Tuple{WyckoffPosition{N, T}, StaticArrays.SVector{N, T}}\n\nNormalize a Wyckoff position to the standard unit cell.\n\nExample\n\njulia> w=@WP([1//1, 1//1])\nWyckoffPosition(anchor=[1//1, 1//1]), no parameters)\n\njulia> normalize(w)\n(WP{2,0}, [1, 1])\n\n\n\n\n\n","category":"function"}]
}
